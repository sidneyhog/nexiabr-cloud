name: Setup VPS and Deploy Stack

on:
  push:
    branches:
      - main  # Disparará o fluxo sempre que houver um push na branch main

jobs:
  setup-vps:
    runs-on: ubuntu-latest
    steps:
      # Baixando o repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Configurar chave SSH para acesso à VPS
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY_CONTABO_NEXIABR }}

      # Comandos para configurar a VPS (atualização, instalação do Docker, etc.)
      - name: Initial VPS setup
        run: |
          ssh root@156.67.83.29 "sudo apt-get update -y"
          ssh root@156.67.83.29 "sudo apt-get install -y apparmor-utils"
          ssh root@156.67.83.29 "hostnamectl set-hostname nexia"
          ssh root@156.67.83.29 "sed -i 's/localhost/nexiabr/g' /etc/hosts"
          ssh root@156.67.83.29 "curl -fsSL https://get.docker.com | bash"
          ssh root@156.67.83.29 "docker swarm init"
          ssh root@156.67.83.29 "docker network create --driver=overlay network_nexiabr"

      # Deploy Traefik stack
      - name: Deploy Traefik stack
        run: |
          ssh root@156.67.83.29 "docker stack deploy --prune --resolve-image always -c /path/to/traefik.yaml traefik"
      
            # Deploy Portainer stack diretamente na VPS
      - name: Deploy Portainer stack
        run: |
          ssh root@156.67.83.29 "docker stack deploy --prune --resolve-image always -c /root/stacks/portainer.yaml portainer"

      # Esperar o Portainer estar pronto antes de continuar
      - name: Wait for Portainer to be ready
        run: |
          sleep 30  # Aguarda 30 segundos para garantir que o Portainer esteja disponível.

      # Configurar a conta de admin via API
      - name: Create admin account for Portainer
        run: |
          # Chamar a API do Portainer para criar um usuário admin
          curl -X POST -H "Content-Type: application/json" \
            -d '{"Username": "admin", "Password": "your_admin_password"}' \
            http://156.67.83.29:9000/api/auth

          # Obter o token de autenticação
          export TOKEN=$(curl -s -X POST -d '{"Username":"admin", "Password":"${{ secrets.SENHA_PORTAINER }}"}' http://156.67.83.29:9000/api/auth | jq -r .jwt)
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
